entrypoints TermExprList;

--testing entrypoint
LastTerm . TermExprList ::= TermExpr;
ConsTerm . TermExprList ::= TermExpr "," TermExprList;

--testing entrypoint
--EmptyDef . ADTypeList ::= ;
--ListDef  . ADTypeList ::= ADType ";" ADTypeList;

comment "--" ;
comment "{-" "-}" ;

QIdent . QName ::= [Ident];
separator nonempty Ident "." ;

SimpleIdent . SimpleName ::= Ident;

separator nonempty TypeExpr2 "";

TyQName    . TypeExpr2 ::= QName;
TyApp      . TypeExpr1 ::= TypeExpr2 [TypeExpr2];
TyArr      . TypeExpr ::= TypeExpr1 "->" TypeExpr;
TyNamedArr . TypeExpr ::= "(" SimpleName ":" TypeExpr ")" "->" TypeExpr;

coercions TypeExpr 2;

UnionType . ADType ::= "type" SimpleName TypeParamList "=" ConstructorDeclList;

EmptyTyP  . TypeParamList ::= ;
LastTyP   . TypeParamList ::= Ident;
ConsTyP   . TypeParamList ::= Ident TypeParamList;

NilCtrD   . ConstructorDeclList ::=;
ConsCtrD  . ConstructorDeclList ::= "|" ConstructorDecl ConstructorDeclList;
CtrDecl   . ConstructorDecl ::= SimpleName ConstructorTypeDecl;

EmptyCtrTyD . ConstructorTypeDecl ::= ;
FullCtrTyD  . ConstructorTypeDecl ::= ":" TypeExpr;
ParamCtrTyD . ConstructorTypeDecl ::= "of" ParamTypeDecl;

LastParamTy . ParamTypeDecl ::= TypeExpr;
ConsParamTy . ParamTypeDecl ::= TypeExpr "*" ParamTypeDecl;

separator NamedParamDecl ";";

FullTyDecl  . NamedParamDecl ::= SimpleName ":" TypeExpr;
ParamTyDecl .NamedParamDecl ::= SimpleName "of" ParamTypeDecl;

RecordType . ADType ::= "type" SimpleName TypeParamList "=" SimpleName "{" [NamedParamDecl] "}";

CoType . ADType ::= "cotype" SimpleName TypeParamList "=" SimpleName "{" [NamedParamDecl] "}";

terminator FunParamDecl "";
SimplePDecl . FunParamDecl ::= SimpleName;
NamedPDecl  . FunParamDecl ::= "(" SimpleName ":" TypeExpr ")";

separator nonempty SinglePattern1 "";
IdentPat . SinglePattern1 ::= QName;
AppPat   . SinglePattern ::= SinglePattern1 [SinglePattern1];
coercions SinglePattern 1;

--separator nonempty SinglePattern ",";
LastPat . PatternList ::= SinglePattern;
ConsPat . PatternList ::= SinglePattern "," PatternList;

MatchBranch . Branching ::= "|" PatternList "->" TermExpr ;
terminator nonempty Branching ";";

RecFieldBind . FieldBinding ::= QName "=" TermExpr;
separator nonempty FieldBinding ";";

separator nonempty TermExpr2 "";

TermIdent . TermExpr2 ::= QName;
TermApp   . TermExpr1 ::= TermExpr2 [TermExpr2];
TermAbs   . TermExpr ::= "fun" FunParamDecl [FunParamDecl] "=>" TermExpr;
TermBindPat . TermExpr ::= "let" "(" SinglePattern ")" "=" TermExpr1 "in" TermExpr;
TermBind  . TermExpr ::= "let" SimpleName [FunParamDecl] "=" TermExpr1 "in" TermExpr;
TermBindRec . TermExpr ::= "let" "rec" SimpleName [FunParamDecl] "=" TermExpr1 "in" TermExpr;
TermProj . TermExpr ::= "(" TermExpr ")" "^" QName;
TermWithType . TermExpr ::= "(" TermExpr ":" TypeExpr ")";
TermRecMod . TermExpr ::= "{" TermExpr1 "with" [FieldBinding] "}";
TermPatMatch . TermExpr ::= "match" TermExprList "with" "{" [Branching] "}";
TermImpoMatch . TermExpr ::= "match" TermExprList "with" "absurd";
coercions TermExpr 2;