entrypoints DefList;

--testing entrypoint
EmptyDef . DefList ::= ;
ConsTypeDef  . DefList ::= ADType ";" DefList;
ConsFunDef  . DefList ::= FunDef ";" DefList;

comment "--" ;
comment "{-" "-}" ;

QIdent . QName ::= [Ident];
separator nonempty Ident "." ;

SimpleIdent . SimpleName ::= Ident;

separator nonempty TypeExpr2 "";

TyQName    . TypeExpr2 ::= QName;
TyApp      . TypeExpr1 ::= TypeExpr2 [TypeExpr2];
TyArr      . TypeExpr ::= TypeExpr1 "->" TypeExpr;
TyNamedArr . TypeExpr ::= "(" SimpleName ":" TypeExpr ")" "->" TypeExpr;

coercions TypeExpr 2;

UnionType . ADType ::= "type" SimpleName TypeParamList "=" ConstructorDeclList;

EmptyTyP  . TypeParamList ::= ;
LastTyP   . TypeParamList ::= Ident;
ConsTyP   . TypeParamList ::= Ident TypeParamList;

NilCtrD   . ConstructorDeclList ::=;
ConsCtrD  . ConstructorDeclList ::= "|" ConstructorDecl ConstructorDeclList;
CtrDecl   . ConstructorDecl ::= SimpleName ConstructorTypeDecl;

EmptyCtrTyD . ConstructorTypeDecl ::= ;
FullCtrTyD  . ConstructorTypeDecl ::= ":" TypeExpr;
ParamCtrTyD . ConstructorTypeDecl ::= "of" ParamTypeDecl;

LastParamTy . ParamTypeDecl ::= TypeExpr;
ConsParamTy . ParamTypeDecl ::= TypeExpr "*" ParamTypeDecl;

separator NamedParamDecl ";";

FullTyDecl  . NamedParamDecl ::= SimpleName ":" TypeExpr;
ParamTyDecl .NamedParamDecl ::= SimpleName "of" ParamTypeDecl;

RecordType . ADType ::= "type" SimpleName TypeParamList "=" SimpleName "{" [NamedParamDecl] "}";

CoType . ADType ::= "cotype" SimpleName TypeParamList "=" SimpleName "{" [NamedParamDecl] "}";

terminator FunParamDecl "";
SimplePDecl . FunParamDecl ::= SimpleName;
NamedPDecl  . FunParamDecl ::= "(" SimpleName ":" TypeExpr ")";

IdentPat . SinglePattern2 ::= QName;
SimpleAppPat . SinglePattern2 ::= SinglePattern2 SimpleName;
AppFirstPat   . SinglePattern1 ::= QName "(" SinglePattern ")";
AppNextPat   . SinglePattern1 ::= SinglePattern1 "(" SinglePattern ")";
AtPat    . SinglePattern ::= "(" SinglePattern ")" "@" SimpleName;
coercions SinglePattern 2;

--separator nonempty SinglePattern ",";
LastPat . PatternList ::= SinglePattern;
ConsPat . PatternList ::= SinglePattern "," PatternList;

MatchBranch . Branching ::= "|" PatternList "->" TermExpr ;
terminator nonempty Branching ";";

RecFieldBind . FieldBinding ::= QName "=" TermExpr;
separator nonempty FieldBinding ";";


TermOr. TermExpr2 ::= TermExpr2 "|" TermExpr3;
TermAnd. TermExpr3 ::= TermExpr3 "&" TermExpr4;

TermEqual. TermExpr4 ::= TermExpr4 "=" TermExpr5;
TermInEqual. TermExpr4 ::= TermExpr4 "!=" TermExpr5;

TermLess. TermExpr5 ::= TermExpr5 "<" TermExpr6;
TermLessEq. TermExpr5 ::= TermExpr5 "<=" TermExpr6;
TermGt. TermExpr5 ::= TermExpr5 ">" TermExpr6;
TermGtEq. TermExpr5 ::= TermExpr5 ">=" TermExpr6;

TermAdd. TermExpr6  ::= TermExpr6 "+" TermExpr7;
TermSub. TermExpr6  ::= TermExpr6 "-" TermExpr7;

TermMul. TermExpr7 ::= TermExpr7 "*" TermExpr8;
TermDiv. TermExpr7 ::= TermExpr7 "/" TermExpr8;
TermRem. TermExpr7 ::= TermExpr7 "%" TermExpr8;

TermNot. TermExpr8 ::= "!" TermExpr9;
TermNeg. TermExpr8 ::= "(" "-" TermExpr9 ")";

separator nonempty TermExpr10 "";
TermApp   . TermExpr9 ::= TermExpr10 [TermExpr10];

ConstInt. TermExpr10 ::= Integer ;
ConstDouble. TermExpr10 ::= Double ;
ConstStr. TermExpr10 ::= String ;
TermIdent . TermExpr10 ::= QName;

TermAbs   . TermExpr ::= "fun" FunParamDecl [FunParamDecl] "=>" TermExpr;
TermBindPat . TermExpr ::= "let" "(" SinglePattern ")" "=" TermExpr1 "in" TermExpr;
TermBind  . TermExpr ::= "let" SimpleName [FunParamDecl] "=" TermExpr1 "in" TermExpr;
TermBindRec . TermExpr ::= "let" "rec" SimpleName [FunParamDecl] "=" TermExpr1 "in" TermExpr;
TermProj . TermExpr ::= "(" TermExpr ")" "^" QName;
TermWithType . TermExpr ::= "(" TermExpr ":" TypeExpr ")";
TermRecMod . TermExpr ::= "{" TermExpr1 "with" [FieldBinding] "}";
TermPatMatch . TermExpr ::= "match" TermExprList "with" "{" [Branching] "}";
TermImpoMatch . TermExpr ::= "match" TermExprList "with" "absurd";
coercions TermExpr 10;

LastTerm . TermExprList ::= TermExpr;
ConsTerm . TermExprList ::= TermExpr "," TermExprList;

FunBind      . FunDef ::= "let" SimpleName [FunParamDecl] "=" TermExpr;
FunBindWithR . FunDef ::= "let" SimpleName [FunParamDecl] ":" TypeExpr "=" TermExpr;
FunBindRec      . FunDef ::= "let" "rec" SimpleName [FunParamDecl] "=" TermExpr;
FunBindRecWithR . FunDef ::= "let" "rec" SimpleName [FunParamDecl] ":" TypeExpr "=" TermExpr;