entrypoints ModuleDef;

Module . ModuleDef ::= ModuleName ";" [OpenModule] DefList;
ImportModule . OpenModule ::= "open" QName;
ImportModuleAs . OpenModule ::= "open" QName "as" SimpleName;
terminator OpenModule ";";

EmptyDef . DefList ::= ;
ConsSingleDef . DefList ::= SingleDef ";" DefList;
MutualDef . DefList ::= MutualDefList DefList;

terminator SingleDef ";";
ConsTypeDef . SingleDef ::= ADType;
ConsFunDef  . SingleDef ::= FunDef;

StartMutual . MutualTag  ::= "mutual";
MutualList . MutualDefList ::= MutualTag "{" [SingleDef] "}";

comment "--" ;
comment "{-" "-}" ;

QNameList . QName ::= [Ident];
separator nonempty Ident "." ;

ModuleBindName . ModuleName ::= "module" QName;

NameIdent . SimpleName ::= Ident;

separator nonempty TypeExpr2 "";

TyInt   . TypeExpr2 ::= "Int";
TyFloat . TypeExpr2 ::= "Double";
TyStr   . TypeExpr2 ::= "String";
TyBool  . TypeExpr2 ::= "Bool";
TyQName    . TypeExpr2 ::= QName;
TyApp      . TypeExpr1 ::= TypeExpr2 [TypeExpr2];
TyArr      . TypeExpr ::= TypeExpr1 "->" TypeExpr;
TyNamedArr . TypeExpr ::= TypeArrHead "->" TypeExpr;
TyNamedHead. TypeArrHead ::= "(" SimpleName ":" TypeExpr ")";
coercions TypeExpr 2;

TyDeclName . TyCtorDecl ::= SimpleName TypeParamList;
IndDeclTy  . IndTyCtorPre ::= "type" TyCtorDecl;
CoIndDeclTy . CoIndTyCtorPre ::= "lazy" "type" TyCtorDecl;

EmptyTyP  . TypeParamList ::= ;
ConsTyP   . TypeParamList ::= TypeParamList Ident;

UnionType . ADType ::= IndTyCtorPre "=" ConstructorDeclList;

RecordType . ADType ::= IndTyCtorPre "=" SimpleName "{" [NamedParamDecl] "}";

CoType . ADType ::= CoIndTyCtorPre"=" "{" [NamedParamDecl] "}";

NilCtrD   . ConstructorDeclList ::=;
ConsCtrD  . ConstructorDeclList ::= "|" ConstructorDecl ConstructorDeclList;
CtrDecl   . ConstructorDecl ::= SimpleName ConstructorTypeDecl;
--ValCtorNm . ValueCtorName ::= SimpleName;

EmptyCtrTyD . ConstructorTypeDecl ::= ;
FullCtrTyD  . ConstructorTypeDecl ::= ":" TypeExpr;
ParamCtrTyD . ConstructorTypeDecl ::= "of" ParamTypeDecl;

LastParamTy . ParamTypeDecl ::= TypeExpr;
ConsParamTy . ParamTypeDecl ::= TypeExpr "*" ParamTypeDecl;

terminator NamedParamDecl ";";

FullTyDecl  . NamedParamDecl ::= SimpleName ":" TypeExpr;
ParamTyDecl . NamedParamDecl ::= SimpleName "of" ParamTypeDecl;


TermOr. TermExpr1 ::= TermExpr1 "|" TermExpr2;
TermAnd. TermExpr2 ::= TermExpr2 "&" TermExpr3;

TermEqual. TermExpr3 ::= TermExpr3 "=" TermExpr4;
TermInEqual. TermExpr3 ::= TermExpr3 "!=" TermExpr4;

TermLess. TermExpr4 ::= TermExpr4 "<" TermExpr5;
TermLessEq. TermExpr4 ::= TermExpr4 "<=" TermExpr5;
TermGt. TermExpr4 ::= TermExpr4 ">" TermExpr5;
TermGtEq. TermExpr4 ::= TermExpr4 ">=" TermExpr5;

TermAdd. TermExpr5  ::= TermExpr5 "+" TermExpr6;
TermSub. TermExpr5  ::= TermExpr5 "-" TermExpr6;

TermMul. TermExpr6 ::= TermExpr6 "*" TermExpr7;
TermDiv. TermExpr6 ::= TermExpr6 "/" TermExpr7;
TermRem. TermExpr6 ::= TermExpr6 "%" TermExpr7;

TermNot. TermExpr7 ::= "!" TermExpr8;
TermNeg. TermExpr7 ::= "(" "-" TermExpr8 ")";

separator nonempty TermExpr9 "";
TermApp   . TermExpr8 ::= TermExpr9 [TermExpr9];

ConstTrue . TermExpr9 ::= "true";
ConstFalse . TermExpr9 ::= "false";
ConstInt. TermExpr9 ::= Integer ;
ConstDouble. TermExpr9 ::= Double ;
ConstStr. TermExpr9 ::= String ;
TermIdent . TermExpr9 ::= QName;

TermConvInt . TermExpr9 ::= "int" "(" TermExpr ")";
TermConvStr . TermExpr9 ::= "string" "(" TermExpr ")";
TermConvDouble . TermExpr9 ::= "double" "(" TermExpr ")";

terminator FunParamDecl "";
SimplePDecl . FunParamDecl ::= SimpleName;
NamedPDecl  . FunParamDecl ::= "(" SimpleName ":" TypeExpr ")";

IdentPat . SinglePattern ::= QName;
AppSimplePat  . SinglePattern ::= SinglePattern SimpleName;
AppComplexPat . SinglePattern ::= SinglePattern "(" SinglePattern ")";
AppAtPat . SinglePattern ::= SinglePattern "(" SinglePattern ")" "@" SimpleName;
AtPat    . SinglePattern ::= "(" SinglePattern ")" "@" SimpleName;

separator nonempty SinglePattern ",";

MatchPattern . MatchPat ::= "|" [SinglePattern];
MatchBranch . Branching ::= MatchPat "->" TermExpr ;
terminator nonempty Branching ";";

RecFieldBind . FieldBinding ::= QName "=" TermExpr;
separator nonempty FieldBinding ";";

LambdaParamList . LambdaFunParams ::= FunParamDecl [FunParamDecl];
TermAbs   . TermExpr ::= "fun" LambdaFunParams "=>" TermExpr;

LetSinglePat . LetPatDecl ::= "(" SinglePattern ")";
TermBindPat . TermExpr ::= "let" LetPatDecl "=" TermExpr "in" TermExpr;

TermBind  . TermExpr ::= "let" LetFunDecl "=" TermExpr "in" TermExpr;
TermBindRec . TermExpr ::= "let" LetRecFunDecl "=" TermExpr "in" TermExpr;

TermCoindProj . TermExpr ::= QName "^" TermExpr;
TermWithType . TermExpr ::= "(" TermExpr ":" TypeExpr ")";
TermRecMod . TermExpr ::= "{" TermExpr "with" [FieldBinding] "}";

SingleProjPat . ProjPat ::= QName;
separator ProjPat "^";
ProjBind . ProjectionBinding ::= [ProjPat] "=" TermExpr;
separator nonempty ProjectionBinding ";";
CoRecursive . TermExpr ::= "lazy" "{" [ProjectionBinding] "}";

TermPatMatch . TermExpr ::= "match" MatchTermList "with" "{" [Branching] "}";
TermImpoMatch . TermExpr ::= "match" MatchTermList "with" "absurd";
coercions TermExpr 9;

LastTerm . MatchTermList ::= TermExpr;
ConsTerm . MatchTermList ::= TermExpr "," MatchTermList;

LetFunNm   . LetFunDecl ::= SimpleName [FunParamDecl];
LetFunNmTy . LetFunDecl ::= SimpleName [FunParamDecl] ":" TypeExpr;
LetRecFunNm . LetRecFunDecl ::= "rec" LetFunDecl;

FunBind . FunDef ::= "let" LetFunDecl "=" TermExpr;
FunBindRec . FunDef ::= "let" LetRecFunDecl "=" TermExpr;
